```python
import unittest
import random

class TestMathFunctions(unittest.TestCase):

    @unittest.skipIf(random.random() < 0.5, "Skipping test_add randomly.")
    def test_add(self):
        self.assertEqual(add(1, 2), 3)
        self.assertEqual(add(-2, 5), 3)
        self.assertEqual(add(0, 0), 0)
        with self.subTest("Large numbers"):
            self.assertEqual(add

    def test_subtract(self):
        self.assertEqual(subtract(5, 2), 3)
        self.assertEqual(subtract(-2, -5), 3)
        self.assertEqual(subtract(0, 0), 0)

    def test_multiply(self):
        self.assertEqual(multiply(2, 3), 6)
        self.assertEqual(multiply(-2, 5), -10)
        self.assertEqual(multiply(0, 0), 0)

    def test_divide(self):
        self.assertEqual(divide(6, 2), 3)
        self.assertEqual(divide(-6, 2), -3)
        self.assertEqual(divide(0, 2), 0)
        with self.assertRaises(ZeroDivisionError):
            divide(5, 0)

class TestGreetFunction(unittest.TestCase):

    def test_greet(self):
        self.assertEqual(greet("Alice"), "Hello, Alice!")
        self.assertEqual(greet(""), "Hello, !")
        with self.assertRaises(TypeError):
            greet(123)

class TestFactorialFunction(unittest.TestCase):

    def test_factorial(self):
        self.assertEqual(factorial(0), 1)
        self.assertEqual(factorial(1), 1)
        self.assertEqual(factorial(5), 120)
        with self.assertRaises(TypeError):
            factorial("abc")
        with self.assertRaises(ValueError):
            factorial(-1)

class TestCalculatorClass(unittest.TestCase):

    def test_calculator(self):
        calc = Calculator()
        self.assertEqual(calc.get_value(), 0)
        calc.add(5)
        self.assertEqual(calc.get_value(), 5)
        calc.subtract(3)
        self.assertEqual(calc.get_value(), 2)

class